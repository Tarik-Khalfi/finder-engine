{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\x\\\\Documents\\\\webdev\\\\frontend\\\\REACT JS\\\\search_engine\\\\src\\\\contexts\\\\ResultContextProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultContext = /*#__PURE__*/createContext();\nconst baseUrl = \"https://google-search3.p.rapidapi.com/api/v1\";\nexport const ResultContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [results, setResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const getResults = async type => {\n    setIsLoading(true);\n    const response = await fetch(`${baseUrl}${type}`, {\n      method: \"GET\",\n      headers: {\n        \"x-user-agent\": \"desktop\",\n        \"x-rapidapi-host\": \"google-search3.p.rapidapi.com\",\n        \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\n      }\n    });\n    const data = await response.json();\n    console.log({\n      type,\n      data\n    });\n\n    if (type.includes(\"/news\")) {\n      setResults(data.entries);\n    } else if (type.includes(\"/images\")) {\n      setResults(data.image_results);\n    } else {\n      setResults(data.results);\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ResultContext.Provider, {\n    value: {\n      getResults,\n      results,\n      searchTerm,\n      setSearchTerm,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResultContextProvider, \"DUxXd/JnBYVe152yzSHKC4bD6PE=\");\n\n_c = ResultContextProvider;\nexport const useResultContext = () => {\n  _s2();\n\n  return useContext(ResultContext);\n};\n\n_s2(useResultContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultContextProvider\");","map":{"version":3,"sources":["C:/Users/x/Documents/webdev/frontend/REACT JS/search_engine/src/contexts/ResultContextProvider.js"],"names":["React","createContext","useContext","useState","ResultContext","baseUrl","ResultContextProvider","children","results","setResults","isLoading","setIsLoading","searchTerm","setSearchTerm","getResults","type","response","fetch","method","headers","process","env","REACT_APP_API_KEY","data","json","console","log","includes","entries","image_results","useResultContext"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;;AACA,MAAMC,aAAa,gBAAGH,aAAa,EAAnC;AACA,MAAMI,OAAO,GAAG,8CAAhB;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;;AACA,QAAMW,UAAU,GAAG,MAAOC,IAAP,IAAgB;AACjCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEZ,OAAQ,GAAEU,IAAK,EAAnB,EAAsB;AAChDG,MAAAA,MAAM,EAAE,KADwC;AAEhDC,MAAAA,OAAO,EAAE;AACP,wBAAgB,SADT;AAEP,2BAAmB,+BAFZ;AAGP,0BAAkBC,OAAO,CAACC,GAAR,CAAYC;AAHvB;AAFuC,KAAtB,CAA5B;AAQA,UAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEX,MAAAA,IAAF;AAAQQ,MAAAA;AAAR,KAAZ;;AACA,QAAIR,IAAI,CAACY,QAAL,CAAc,OAAd,CAAJ,EAA4B;AAC1BlB,MAAAA,UAAU,CAACc,IAAI,CAACK,OAAN,CAAV;AACD,KAFD,MAEO,IAAIb,IAAI,CAACY,QAAL,CAAc,SAAd,CAAJ,EAA8B;AACnClB,MAAAA,UAAU,CAACc,IAAI,CAACM,aAAN,CAAV;AACD,KAFM,MAEA;AACLpB,MAAAA,UAAU,CAACc,IAAI,CAACf,OAAN,CAAV;AACD;;AAEDG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GArBD;;AAsBA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AAAEG,MAAAA,UAAF;AAAcN,MAAAA,OAAd;AAAuBI,MAAAA,UAAvB;AAAmCC,MAAAA,aAAnC;AAAkDH,MAAAA;AAAlD,KADT;AAAA,cAGGH;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAjCM;;GAAMD,qB;;KAAAA,qB;AAkCb,OAAO,MAAMwB,gBAAgB,GAAG;AAAA;;AAAA,SAAM5B,UAAU,CAACE,aAAD,CAAhB;AAAA,CAAzB;;IAAM0B,gB","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nconst ResultContext = createContext();\r\nconst baseUrl = \"https://google-search3.p.rapidapi.com/api/v1\";\r\nexport const ResultContextProvider = ({ children }) => {\r\n  const [results, setResults] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const getResults = async (type) => {\r\n    setIsLoading(true);\r\n    const response = await fetch(`${baseUrl}${type}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"x-user-agent\": \"desktop\",\r\n        \"x-rapidapi-host\": \"google-search3.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\r\n      },\r\n    });\r\n    const data = await response.json();\r\n    console.log({ type, data });\r\n    if (type.includes(\"/news\")) {\r\n      setResults(data.entries);\r\n    } else if (type.includes(\"/images\")) {\r\n      setResults(data.image_results);\r\n    } else {\r\n      setResults(data.results);\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n  return (\r\n    <ResultContext.Provider\r\n      value={{ getResults, results, searchTerm, setSearchTerm, isLoading }}\r\n    >\r\n      {children}\r\n    </ResultContext.Provider>\r\n  );\r\n};\r\nexport const useResultContext = () => useContext(ResultContext);\r\n"]},"metadata":{},"sourceType":"module"}